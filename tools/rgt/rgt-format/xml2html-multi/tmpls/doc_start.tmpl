<html xmlns="http://www.w3.org/1999/xhtml" lang="en-gb" xml:lang="en-gb" >
<head>
<meta http-equiv="content-language" content="en"/>
<meta http-equiv="content-type" content="text/html; charset=UTF-8"/>

<!-- Latest compiled and minified CSS -->
<link rel="stylesheet" href="@@%s:shared_url@@bootstrap.min.css">
<link rel="stylesheet" href="@@%s:shared_url@@log_style.css">
<link rel="stylesheet" href="@@%s:shared_url@@Chart.min.css">

<!-- jQuery library -->
<script src="@@%s:shared_url@@jquery.min.js"></script>

<!-- Latest compiled JavaScript -->
<script src="@@%s:shared_url@@bootstrap.min.js"></script>

<script src="@@%s:shared_url@@renderjson.js"></script>
<script src="@@%s:shared_url@@Chart.bundle.min.js"></script>
<script src="@@%s:shared_url@@hammer.min.js"></script>
<script src="@@%s:shared_url@@chartjs-plugin-zoom.js"></script>
<script>
    // By default show root's children for JSON, not just single
    // root node.
    renderjson.set_show_to_level(1);

    var yaxis_superscript_mapping = new Map([["0", "\u2070"],
                                             ["1", "\u00B9"],
                                             ["2", "\u00B2"],
                                             ["3", "\u00B3"],
                                             ["4", "\u2074"],
                                             ["5", "\u2075"],
                                             ["6", "\u2076"],
                                             ["7", "\u2077"],
                                             ["8", "\u2078"],
                                             ["9", "\u2079"],
                                             ["-", "\u207B"]]);


    //
    // A callback to label Y axis using proper engineering notation.
    //
    // Unlike Number.toExponential(), this function would produce
    // exponent values that are multiple of three. Also the function
    // converts the digits of the exponent to superscript forms.
    //
    // One deviation from the true engineering notation is that values
    // in ranges (0.00001..0.0001] and [10000..100000) are represented
    // as is, not as Nx10^3 or Nx10^-3 because the former seems to be
    // easier to read than the latter.
    //
    // @param value    Numeric value of a label
    // @param index    Ordinal index of a label (unused)
    // @param values   Array of category labels (unused)
    //
    // @return A string in engineering
    function graph_yaxis_label(value, index, values)
    {
        var absval = Math.abs(value)

        if (absval == 0.0 || (absval < 1e5 && absval > 1e-5))
            return absval.toString()
        else
        {
            var exp = Math.trunc(Math.log10(absval) / 3) * 3
            var mantissa = value / Math.pow(10, exp)

            return mantissa.toString() + "\u00D710" +
                [...exp.toString()].map(ch => yaxis_superscript_mapping.get(ch)).join("")
        }
    }


    //
    // Create a graph in which array of numbers is shown as
    // a line. Each element of array is represented as a point
    // with X = index of the element in the array and Y = value
    // of the element. Line connects these points.
    //
    // @param canvasID    ID of canvas element where to display the
    //                    graph.
    // @param title       Title of the graph (may be empty).
    // @param axis_x      What should be on axis X.
    // @param axis_y      What should be on axis Y.
    //
    // @return Pointer to Chart object.
    function add_graph(canvasID, title, axis_x, axis_y)
    {
        var c;
        var i;
        var j;
        var datasets = [];

        for (i = 0; i < axis_y.length; i++)
        {
            var dataset = {};

            dataset.label = axis_y[i].label;
            dataset.fill = false;
            dataset.lineTension = 0;
            dataset.showLine = true;
            dataset.borderColor = axis_y[i].color;

            dataset.data = [];

            for (j = 0; j < axis_y[i].values.length; j++)
            {
                if (axis_x.auto_seqno)
                {
                    dataset.data.push({x: j, y: axis_y[i].values[j]});
                }
                else
                {
                    if (j >= axis_x.values.length)
                    {
                        break;
                    }
                    else
                    {
                        dataset.data.push({x: axis_x.values[j],
                                           y: axis_y[i].values[j]});
                    }
                }
            }

            datasets.push(dataset);
        }

        ctx = document.getElementById(canvasID);
        c = new Chart(ctx,
                {
                    type: "scatter",
                    data: {
                      datasets: datasets
                    },
                    options: {
                        title: {
                            fontSize: 17,
                            text: title,
                            display: (title.length > 0)
                        },
                        legend: {
                            labels: {
                                fontSize: 15,
                                fontStyle: "bold"
                            }
                        },
                        scales: {
                            xAxes: [{
                                ticks: {
                                    fontSize: 15
                                },
                                scaleLabel: {
                                    display: (axis_x.label.length > 0),
                                    fontSize: 17,
                                    fontStyle: "bold",
                                    labelString: axis_x.label
                                }
                            }],
                            yAxes: [{
                                ticks: {
                                    fontSize: 15,
                                    callback: graph_yaxis_label
                                }
                            }],
                        },
                        maintainAspectRatio: false,
                        plugins: {
                            zoom: {
                                pan: {
                                    enabled: true,
                                    mode: 'xy'
                                },
                                zoom: {
                                    enabled: true,
                                    mode: 'xy'
                                }
                            }
                        },
                    }
                });

        return c;
    }

    //
    // Show a list if it is hidden, hide a list if it is displayed.
    // Change a text and color of the element clicked to show/hide accodingly.
    //
    // @param link_el       HTML element clicked to show/hide the list.
    // @param list_id       ID of the list.
    // @param hide_text     Text to display when list is displayed.
    // @param show_text     Text to display when list is hidden.
    function show_hide_list(link_el, list_id, hide_text, show_text)
    {
        var list_el = document.getElementById(list_id);

        if (list_el.style.display == "none")
        {
            list_el.style.display = "block";
            link_el.innerText = hide_text;
            link_el.className = link_el.className.replace(/\bshow_link\b/g,
                                                          "hide_link");
        }
        else
        {
            list_el.style.display = "none";
            link_el.innerText = show_text;
            link_el.className = link_el.className.replace(/\bhide_link\b/g,
                                                          "show_link");
        }
    }

</script>

<title>
  Logs from @@%s:reporter@@
</title>

</head>
<body>

<script src="@@%s:shared_url@@log_filter.js"></script>
<script type="text/javascript">

function activate_link(name, doc_name, par_name)
{
    parent.treeframe.activate_node(name, par_name);
    document.location.href = doc_name;
}

function toggle_node(node)
{
    if (typeof node == 'string')
        node = document.getElementById(node);
    if (!node)
        return;
    node.style.display = (node.style.display != 'none') ? 'none' : 'block';
}

document.addEventListener("DOMContentLoaded", function(event) {
  init_log_filter();
});

</script>

